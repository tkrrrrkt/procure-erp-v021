version: '3.8'

# ================================================
# ProcureERP Docker Compose Configuration
# 企業級本番環境オーケストレーション
# ================================================

services:
  # ================================================
  # Nginx - リバースプロキシ・SSL終端
  # ================================================
  nginx:
    build:
      context: .
      dockerfile: docker/nginx/Dockerfile
    image: procure-erp/nginx:latest
    container_name: procure-erp-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./docker/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./docker/nginx/conf.d:/etc/nginx/conf.d:ro
      - ./docker/ssl:/etc/nginx/ssl:ro
      - procure-erp-logs:/var/log/nginx
    depends_on:
      - frontend
      - backend
    networks:
      - procure-erp-network
    environment:
      - TZ=Asia/Tokyo
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    security_opt:
      - no-new-privileges:true
    cap_drop:
      - ALL
    cap_add:
      - CHOWN
      - SETUID
      - SETGID
    read_only: true
    tmpfs:
      - /var/cache/nginx:rw,size=100m
      - /var/run:rw,size=100m
      - /tmp:rw,size=100m

  # ================================================
  # Frontend - Next.js Application
  # ================================================
  frontend:
    build:
      context: .
      dockerfile: docker/frontend/Dockerfile
      target: production
      args:
        - NODE_ENV=production
        - NEXT_PUBLIC_API_URL=${NEXT_PUBLIC_API_URL}
        - NEXT_PUBLIC_AUTH0_DOMAIN=${NEXT_PUBLIC_AUTH0_DOMAIN}
        - NEXT_PUBLIC_AUTH0_CLIENT_ID=${NEXT_PUBLIC_AUTH0_CLIENT_ID}
        - NEXT_PUBLIC_AUTH0_AUDIENCE=${NEXT_PUBLIC_AUTH0_AUDIENCE}
        - BUILD_DATE=${BUILD_DATE:-$(date -u +'%Y-%m-%dT%H:%M:%SZ')}
        - VCS_REF=${VCS_REF:-$(git rev-parse --short HEAD)}
    image: procure-erp/frontend:latest
    container_name: procure-erp-frontend
    restart: unless-stopped
    expose:
      - "3000"
    env_file:
      - .env.docker
    environment:
      - NODE_ENV=production
      - PORT=3000
      - BACKEND_URL=http://backend:3001
    volumes:
      - procure-erp-uploads:/app/uploads:ro
      - procure-erp-logs:/app/logs
    depends_on:
      backend:
        condition: service_healthy
    networks:
      - procure-erp-network
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    security_opt:
      - no-new-privileges:true
    cap_drop:
      - ALL
    read_only: true
    tmpfs:
      - /tmp:rw,size=100m
      - /app/.next/cache:rw,size=200m
    user: "1001:1001"
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.frontend.rule=Host(`localhost`)"
      - "traefik.http.services.frontend.loadbalancer.server.port=3000"

  # ================================================
  # Backend - NestJS API Server
  # ================================================
  backend:
    build:
      context: .
      dockerfile: docker/backend/Dockerfile
      target: production
      args:
        - NODE_ENV=production
        - BUILD_DATE=${BUILD_DATE:-$(date -u +'%Y-%m-%dT%H:%M:%SZ')}
        - VCS_REF=${VCS_REF:-$(git rev-parse --short HEAD)}
    image: procure-erp/backend:latest
    container_name: procure-erp-backend
    restart: unless-stopped
    expose:
      - "3001"
    env_file:
      - .env.docker
    environment:
      - NODE_ENV=production
      - PORT=3001
      - DATABASE_URL=postgresql://procure_erp_user:procure_erp_password_2024!@postgres:5432/procure_erp_db
      - REDIS_URL=redis://redis:6379
    volumes:
      - procure-erp-uploads:/app/uploads
      - procure-erp-logs:/app/logs
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - procure-erp-network
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:3001/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 120s
    security_opt:
      - no-new-privileges:true
    cap_drop:
      - ALL
    read_only: true
    tmpfs:
      - /tmp:rw,size=100m
      - /app/logs:rw,size=200m
    user: "1001:1001"
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '1.0'
        reservations:
          memory: 512M
          cpus: '0.5'
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.backend.rule=Host(`localhost`) && PathPrefix(`/api`)"
      - "traefik.http.services.backend.loadbalancer.server.port=3001"

  # ================================================
  # PostgreSQL - メインデータベース
  # ================================================
  postgres:
    image: postgres:16-alpine
    container_name: procure-erp-postgres
    restart: unless-stopped
    expose:
      - "5432"
    env_file:
      - .env.docker
    environment:
      - POSTGRES_DB=procure_erp_db
      - POSTGRES_USER=procure_erp_user
      - POSTGRES_PASSWORD=procure_erp_password_2024!
      - POSTGRES_INITDB_ARGS=--encoding=UTF-8 --locale=C
      - TZ=Asia/Tokyo
      - PGTZ=Asia/Tokyo
    volumes:
      - procure-erp-postgres-data:/var/lib/postgresql/data
      - ./docker/postgres/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql:ro
      - ./docker/postgres/postgresql.conf:/etc/postgresql/postgresql.conf:ro
      - procure-erp-backups:/var/backups
      - procure-erp-logs:/var/log/postgresql
    networks:
      - procure-erp-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U procure_erp_user -d procure_erp_db"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s
    security_opt:
      - no-new-privileges:true
    cap_drop:
      - ALL
    cap_add:
      - CHOWN
      - DAC_OVERRIDE
      - SETUID
      - SETGID
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: '1.5'
        reservations:
          memory: 1G
          cpus: '0.5'
    command: >
      postgres
      -c config_file=/etc/postgresql/postgresql.conf
      -c log_destination=stderr
      -c log_statement=mod
      -c log_min_duration_statement=1000
      -c shared_preload_libraries=pg_stat_statements
      -c track_io_timing=on
      -c track_functions=all

  # ================================================
  # Redis - キャッシュ・セッションストア
  # ================================================
  redis:
    image: redis:7-alpine
    container_name: procure-erp-redis
    restart: unless-stopped
    expose:
      - "6379"
    env_file:
      - .env.docker
    environment:
      - TZ=Asia/Tokyo
    volumes:
      - procure-erp-redis-data:/data
      - ./docker/redis/redis.conf:/etc/redis/redis.conf:ro
      - procure-erp-logs:/var/log/redis
    networks:
      - procure-erp-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    security_opt:
      - no-new-privileges:true
    cap_drop:
      - ALL
    user: "999:999"
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
        reservations:
          memory: 256M
          cpus: '0.25'
    command: >
      redis-server /etc/redis/redis.conf
      --maxmemory 256mb
      --maxmemory-policy allkeys-lru
      --save 900 1
      --save 300 10
      --save 60 10000
      --appendonly yes
      --appendfsync everysec

# ================================================
# Networks
# ================================================
networks:
  procure-erp-network:
    driver: bridge
    name: procure-erp-network
    ipam:
      driver: default
      config:
        - subnet: 172.20.0.0/16
          gateway: 172.20.0.1
    driver_opts:
      com.docker.network.bridge.name: procure-erp-br
      com.docker.network.bridge.enable_ip_masquerade: "true"
      com.docker.network.bridge.enable_icc: "true"
      com.docker.network.driver.mtu: 1500

# ================================================
# Volumes
# ================================================
volumes:
  procure-erp-postgres-data:
    driver: local
    name: procure-erp-postgres-data
    driver_opts:
      type: none
      o: bind
      device: ${PWD}/docker/volumes/postgres-data

  procure-erp-redis-data:
    driver: local
    name: procure-erp-redis-data
    driver_opts:
      type: none
      o: bind
      device: ${PWD}/docker/volumes/redis-data

  procure-erp-uploads:
    driver: local
    name: procure-erp-uploads
    driver_opts:
      type: none
      o: bind
      device: ${PWD}/docker/volumes/uploads

  procure-erp-logs:
    driver: local
    name: procure-erp-logs
    driver_opts:
      type: none
      o: bind
      device: ${PWD}/docker/volumes/logs

  procure-erp-backups:
    driver: local
    name: procure-erp-backups
    driver_opts:
      type: none
      o: bind
      device: ${PWD}/docker/volumes/backups

# ================================================
# Secrets (for production use)
# ================================================
secrets:
  postgres_password:
    file: ./docker/secrets/postgres_password.txt
  jwt_secret:
    file: ./docker/secrets/jwt_secret.txt
  auth0_client_secret:
    file: ./docker/secrets/auth0_client_secret.txt

# ================================================
# Configuration Notes
# ================================================
# 1. すべてのサービスはnon-rootユーザーで実行
# 2. read-onlyファイルシステムでセキュリティ強化
# 3. ヘルスチェックで自動回復機能
# 4. リソース制限でシステム安定性確保
# 5. 構造化ログとモニタリング対応
# 6. 本番環境でのSSL/TLS終端をNginxで実装
# 7. PostgreSQL WAL-Eバックアップ設定対応
# 8. Redis永続化設定（AOF + RDB）
# 9. ネットワーク分離とファイアウォール設定
# 10. Secretsを使用した機密情報管理
# ================================================
