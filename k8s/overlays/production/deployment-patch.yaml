# ================================================
# ProcureERP Production Deployment Patches
# 本番環境デプロイメント設定
# ================================================

apiVersion: apps/v1
kind: Deployment
metadata:
  name: procure-erp-backend
  annotations:
    deployment.kubernetes.io/revision: "production"
    monitoring.coreos.com/enabled: "true"
    prometheus.io/scrape: "true"
    prometheus.io/port: "9090"
    prometheus.io/path: "/metrics"
spec:
  replicas: 3
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 1
      maxSurge: 1
  template:
    metadata:
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "9090"
        prometheus.io/path: "/metrics"
    spec:
      containers:
      - name: backend
        image: procure-erp-backend:v1.0.0
        env:
        - name: NODE_ENV
          value: "production"
        - name: LOG_LEVEL
          value: "info"
        - name: ENABLE_SWAGGER
          value: "false"
        - name: ENABLE_DEBUG_ROUTES
          value: "false"
        - name: RATE_LIMIT_WINDOW_MS
          value: "600000"  # 10 minutes
        - name: RATE_LIMIT_MAX_REQUESTS
          value: "100"     # Strict for production
        - name: MONITORING_ENABLED
          value: "true"
        - name: AUDIT_LOGGING_ENABLED
          value: "true"
        - name: PERFORMANCE_MONITORING
          value: "true"
        - name: ERROR_REPORTING_ENABLED
          value: "true"
        - name: NEWRELIC_LICENSE_KEY
          valueFrom:
            secretKeyRef:
              name: procure-erp-secrets-prod
              key: NEWRELIC_LICENSE_KEY
        - name: DATADOG_API_KEY
          valueFrom:
            secretKeyRef:
              name: procure-erp-secrets-prod
              key: DATADOG_API_KEY
        - name: SENTRY_DSN
          valueFrom:
            secretKeyRef:
              name: procure-erp-secrets-prod
              key: SENTRY_DSN
        resources:
          requests:
            memory: "512Mi"
            cpu: "200m"
          limits:
            memory: "1Gi"
            cpu: "500m"
        livenessProbe:
          httpGet:
            path: /health
            port: 3001
          initialDelaySeconds: 90
          periodSeconds: 30
          timeoutSeconds: 15
          failureThreshold: 3
          successThreshold: 1
        readinessProbe:
          httpGet:
            path: /health/ready
            port: 3001
          initialDelaySeconds: 45
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
          successThreshold: 1
        startupProbe:
          httpGet:
            path: /health
            port: 3001
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 30
          successThreshold: 1
        ports:
        - containerPort: 3001
          name: http
          protocol: TCP
        - containerPort: 9090
          name: metrics
          protocol: TCP
        securityContext:
          runAsNonRoot: true
          runAsUser: 1001
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: true
          capabilities:
            drop:
            - ALL

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: procure-erp-frontend
  annotations:
    deployment.kubernetes.io/revision: "production"
    monitoring.coreos.com/enabled: "true"
spec:
  replicas: 3
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 1
      maxSurge: 1
  template:
    spec:
      containers:
      - name: frontend
        image: procure-erp-frontend:v1.0.0
        env:
        - name: NODE_ENV
          value: "production"
        - name: NEXT_TELEMETRY_DISABLED
          value: "1"
        - name: NEXTAUTH_URL
          value: "https://procure-erp.com"
        - name: NEXT_PUBLIC_VERCEL_ENV
          value: "production"
        - name: MONITORING_ENABLED
          value: "true"
        resources:
          requests:
            memory: "256Mi"
            cpu: "100m"
          limits:
            memory: "512Mi"
            cpu: "300m"
        livenessProbe:
          httpGet:
            path: /api/health
            port: 3000
          initialDelaySeconds: 60
          periodSeconds: 30
          timeoutSeconds: 15
          failureThreshold: 3
          successThreshold: 1
        readinessProbe:
          httpGet:
            path: /api/health
            port: 3000
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
          successThreshold: 1
        startupProbe:
          httpGet:
            path: /api/health
            port: 3000
          initialDelaySeconds: 20
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 30
          successThreshold: 1
        ports:
        - containerPort: 3000
          name: http
          protocol: TCP
        securityContext:
          runAsNonRoot: true
          runAsUser: 1001
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: true
          capabilities:
            drop:
            - ALL

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: procure-erp-nginx
  annotations:
    deployment.kubernetes.io/revision: "production"
    monitoring.coreos.com/enabled: "true"
spec:
  replicas: 3
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 1
      maxSurge: 1
  template:
    spec:
      containers:
      - name: nginx
        image: procure-erp-nginx:v1.0.0
        env:
        - name: NGINX_ENV
          value: "production"
        - name: BACKEND_HOST
          value: "procure-erp-backend-prod"
        - name: FRONTEND_HOST
          value: "procure-erp-frontend-prod"
        resources:
          requests:
            memory: "128Mi"
            cpu: "50m"
          limits:
            memory: "256Mi"
            cpu: "200m"
        livenessProbe:
          httpGet:
            path: /nginx-health
            port: 80
          initialDelaySeconds: 30
          periodSeconds: 30
          timeoutSeconds: 5
          failureThreshold: 3
          successThreshold: 1
        readinessProbe:
          httpGet:
            path: /nginx-health
            port: 80
          initialDelaySeconds: 10
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
          successThreshold: 1
        ports:
        - containerPort: 80
          name: http
          protocol: TCP
        - containerPort: 443
          name: https
          protocol: TCP
        securityContext:
          runAsNonRoot: true
          runAsUser: 1001
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: true
          capabilities:
            drop:
            - ALL

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: procure-erp-postgres
  annotations:
    deployment.kubernetes.io/revision: "production"
    backup.velero.io/backup-volumes: "postgres-data"
    monitoring.coreos.com/enabled: "true"
spec:
  replicas: 3  # HA setup for production
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 1
      maxSurge: 0
  template:
    spec:
      containers:
      - name: postgres
        env:
        - name: POSTGRES_DB
          value: "procure_erp_prod"
        - name: POSTGRES_USER
          value: "procure_erp_user"
        - name: PGDATA
          value: "/var/lib/postgresql/data/pgdata"
        - name: POSTGRES_INITDB_ARGS
          value: "--encoding=UTF-8 --lc-collate=C --lc-ctype=C"
        - name: POSTGRES_MAX_CONNECTIONS
          value: "200"
        - name: POSTGRES_SHARED_BUFFERS
          value: "256MB"
        - name: POSTGRES_EFFECTIVE_CACHE_SIZE
          value: "1GB"
        resources:
          requests:
            memory: "512Mi"
            cpu: "200m"
          limits:
            memory: "1Gi"
            cpu: "500m"
        livenessProbe:
          exec:
            command:
            - /bin/sh
            - -c
            - exec pg_isready -U "procure_erp_user" -d "procure_erp_prod" -h 127.0.0.1 -p 5432
          initialDelaySeconds: 60
          periodSeconds: 30
          timeoutSeconds: 15
          failureThreshold: 3
          successThreshold: 1
        readinessProbe:
          exec:
            command:
            - /bin/sh
            - -c
            - exec pg_isready -U "procure_erp_user" -d "procure_erp_prod" -h 127.0.0.1 -p 5432
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
          successThreshold: 1
        ports:
        - containerPort: 5432
          name: postgres
          protocol: TCP
        securityContext:
          runAsNonRoot: true
          runAsUser: 999
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: false
          capabilities:
            drop:
            - ALL

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: procure-erp-redis
  annotations:
    deployment.kubernetes.io/revision: "production"
    backup.velero.io/backup-volumes: "redis-data"
    monitoring.coreos.com/enabled: "true"
spec:
  replicas: 3  # HA setup for production
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 1
      maxSurge: 0
  template:
    spec:
      containers:
      - name: redis
        args:
        - redis-server
        - --appendonly
        - "yes"
        - --appendfsync
        - "everysec"
        - --maxmemory
        - "256mb"
        - --maxmemory-policy
        - "allkeys-lru"
        - --tcp-keepalive
        - "60"
        - --save
        - "900 1"
        - --save
        - "300 10"
        - --save
        - "60 10000"
        resources:
          requests:
            memory: "128Mi"
            cpu: "50m"
          limits:
            memory: "256Mi"
            cpu: "200m"
        livenessProbe:
          exec:
            command:
            - redis-cli
            - ping
          initialDelaySeconds: 30
          periodSeconds: 15
          timeoutSeconds: 5
          failureThreshold: 3
          successThreshold: 1
        readinessProbe:
          exec:
            command:
            - redis-cli
            - ping
          initialDelaySeconds: 10
          periodSeconds: 5
          timeoutSeconds: 3
          failureThreshold: 3
          successThreshold: 1
        ports:
        - containerPort: 6379
          name: redis
          protocol: TCP
        securityContext:
          runAsNonRoot: true
          runAsUser: 999
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: false
          capabilities:
            drop:
            - ALL
