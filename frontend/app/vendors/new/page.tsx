"use client"

import { useState } from "react"
import { useRouter } from "next/navigation"
import { Save, X, Shield, CheckCircle2 } from "lucide-react"
import { Button } from "@/components/ui/button"
import { Card, CardContent, CardFooter, CardHeader, CardTitle } from "@/components/ui/card"
import { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from "@/components/ui/form"
import { Input } from "@/components/ui/input"
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select"
import { Checkbox } from "@/components/ui/checkbox"
import { RadioGroup, RadioGroupItem } from "@/components/ui/radio-group"
import { Textarea } from "@/components/ui/textarea"
import { Combobox } from "@/components/ui/combobox"
import { Badge } from "@/components/ui/badge"
import { Alert, AlertDescription } from "@/components/ui/alert"
import { createVendorSchema, CreateVendorFormData } from "@/lib/validation/schemas"
import { useValidatedForm, useFormErrorHandler } from "@/hooks/useValidatedForm"
import { ClientSanitizer } from "@/lib/validation/sanitizer"

// ‰ºÅÊ•≠Á¥öÊ§úË®º„Çπ„Ç≠„Éº„Éû‰ΩøÁî®Ôºà„Éê„ÉÉ„ÇØ„Ç®„É≥„ÉâDTOÂÆåÂÖ®ÂêåÊúüÔºâ
type FormValues = CreateVendorFormData

// ÈÉΩÈÅìÂ∫úÁúå„É™„Çπ„Éà
const prefectures = [
  "ÂåóÊµ∑ÈÅì",
  "ÈùíÊ£ÆÁúå",
  "Â≤©ÊâãÁúå",
  "ÂÆÆÂüéÁúå",
  "ÁßãÁî∞Áúå",
  "Â±±ÂΩ¢Áúå",
  "Á¶èÂ≥∂Áúå",
  "Ëå®ÂüéÁúå",
  "Ê†ÉÊú®Áúå",
  "Áæ§È¶¨Áúå",
  "ÂüºÁéâÁúå",
  "ÂçÉËëâÁúå",
  "Êù±‰∫¨ÈÉΩ",
  "Á•ûÂ•àÂ∑ùÁúå",
  "Êñ∞ÊΩüÁúå",
  "ÂØåÂ±±Áúå",
  "Áü≥Â∑ùÁúå",
  "Á¶è‰∫ïÁúå",
  "Â±±Ê¢®Áúå",
  "Èï∑ÈáéÁúå",
  "Â≤êÈòúÁúå",
  "ÈùôÂ≤°Áúå",
  "ÊÑõÁü•Áúå",
  "‰∏âÈáçÁúå",
  "ÊªãË≥ÄÁúå",
  "‰∫¨ÈÉΩÂ∫ú",
  "Â§ßÈò™Â∫ú",
  "ÂÖµÂ∫´Áúå",
  "Â•àËâØÁúå",
  "ÂíåÊ≠åÂ±±Áúå",
  "È≥•ÂèñÁúå",
  "Â≥∂Ê†πÁúå",
  "Â≤°Â±±Áúå",
  "Â∫ÉÂ≥∂Áúå",
  "Â±±Âè£Áúå",
  "Âæ≥Â≥∂Áúå",
  "È¶ôÂ∑ùÁúå",
  "ÊÑõÂ™õÁúå",
  "È´òÁü•Áúå",
  "Á¶èÂ≤°Áúå",
  "‰ΩêË≥ÄÁúå",
  "Èï∑Â¥éÁúå",
  "ÁÜäÊú¨Áúå",
  "Â§ßÂàÜÁúå",
  "ÂÆÆÂ¥éÁúå",
  "ÈπøÂÖêÂ≥∂Áúå",
  "Ê≤ñÁ∏ÑÁúå",
]

// ÊãÖÂΩìËÄÖ„É™„Çπ„Éà
const employees = [
  { id: "E001", name: "Áî∞‰∏≠ ÂÅ•Â§™" },
  { id: "E002", name: "‰ΩêËó§ ÁæéÂí≤" },
  { id: "E003", name: "Èà¥Êú® Â§ßËºî" },
  { id: "E004", name: "È´òÊ©ã Áõ¥Â≠ê" },
  { id: "E005", name: "‰ºäËó§ Ë™†" },
]

export default function NewVendorPage() {
  const router = useRouter()
  const [isSubmitting, setIsSubmitting] = useState(false)
  const [useHyphen, setUseHyphen] = useState(true)
  const [sanitizationStats, setSanitizationStats] = useState(ClientSanitizer.getStats())
  const { handleValidationErrors, handleSanitizationComplete } = useFormErrorHandler()

  // ‰ºÅÊ•≠Á¥öÊ§úË®º„Éª„Çµ„Éã„Çø„Ç§„Çº„Éº„Ç∑„Éß„É≥Áµ±Âêà„Éï„Ç©„Éº„É†
  const form = useValidatedForm({
    schema: createVendorSchema,
    defaultValues: {
      name: "",
      code: "",
      kana_name: "",
      email: "",
      phone: "",
      fax: "",
      postal_code: "",
      address: "",
      website: "",
      business_categories: [],
      notes: "",
      is_active: true,
    },
    sanitizationOptions: {
      stripHtml: true,
      trim: true,
      maxLength: 1000,
      escapeSql: true,
    },
    onValidationError: handleValidationErrors,
    onSanitizationComplete: (data) => {
      handleSanitizationComplete(data)
      setSanitizationStats(ClientSanitizer.getStats())
    },
    enableRealTimeValidation: true,
    autoSanitize: true,
  })

  // „Éï„Ç©„Éº„É†ÈÄÅ‰ø°Âá¶ÁêÜ
  const onSubmit = form.handleSafeSubmit(
    async (values: FormValues) => {
      setIsSubmitting(true)
      try {
        console.log('üîí ‰ºÅÊ•≠Á¥öÊ§úË®ºÊ∏à„Åø„Éô„É≥„ÉÄ„Éº„Éá„Éº„Çø:', values)
        
        // ÊúÄÁµÇ„Çµ„Éã„Çø„Ç§„Çº„Éº„Ç∑„Éß„É≥Áµ±Ë®àÊõ¥Êñ∞
        setSanitizationStats(ClientSanitizer.getStats())
        
        // „Éê„ÉÉ„ÇØ„Ç®„É≥„ÉâAPIÂëº„Å≥Âá∫„ÅóÔºàÊó¢„Å´Ê§úË®º„Éª„Çµ„Éã„Çø„Ç§„Ç∫Ê∏à„ÅøÔºâ
        // await createVendor(values)
        
        router.push('/vendors')
      } catch (error) {
        console.error('üö® „Éô„É≥„ÉÄ„Éº‰ΩúÊàê„Ç®„É©„Éº:', error)
      } finally {
        setIsSubmitting(false)
      }
    },
    (errors) => {
      console.warn('üîç „Éï„Ç©„Éº„É†Ê§úË®º„Ç®„É©„Éº:', errors)
      setIsSubmitting(false)
    }
  )

  // ÈÉµ‰æøÁï™Âè∑„ÅÆ„Éï„Ç©„Éº„Éû„ÉÉ„ÉàÂá¶ÁêÜ
  const formatPostalCode = (value: string) => {
    // Êï∞Â≠ó‰ª•Â§ñ„ÇíÂâäÈô§
    const numbers = value.replace(/[^\d]/g, "")

    if (numbers.length <= 3) {
      return numbers
    }

    if (useHyphen) {
      return `${numbers.slice(0, 3)}-${numbers.slice(3, 7)}`
    } else {
      return numbers.slice(0, 7)
    }
  }

  return (
    <div className="container-fluid px-4 mx-auto pb-10">
      <div className="mb-6">
        <h1 className="text-2xl font-bold">‰ªïÂÖ•ÂÖà„Éû„Çπ„ÇøÁôªÈå≤</h1>
        <div className="text-right text-sm text-muted-foreground">„É¢„Éº„ÉâÔºöÊñ∞Ë¶è</div>
      </div>

      <Form {...form}>
        <form onSubmit={form.handleSubmit(onSubmit)} className="space-y-6">
          <Card>
            <CardContent className="pt-6">
              <div className="grid gap-4 md:grid-cols-2">
                <div className="space-y-4">
                  <FormField
                    control={form.control}
                    name="code"
                    render={({ field }) => (
                      <FormItem>
                        <FormLabel className="bg-blue-100 px-4 py-2 block">‰ªïÂÖ•ÂÖà„Ç≥„Éº„Éâ</FormLabel>
                        <FormControl>
                          <Input {...field} />
                        </FormControl>
                        <FormMessage />
                      </FormItem>
                    )}
                  />

                  <FormField
                    control={form.control}
                    name="name"
                    render={({ field }) => (
                      <FormItem>
                        <FormLabel className="bg-blue-100 px-4 py-2 block">‰ªïÂÖ•ÂÖàÂêç</FormLabel>
                        <FormControl>
                          <Input {...field} />
                        </FormControl>
                        <FormMessage />
                      </FormItem>
                    )}
                  />

                  <FormField
                    control={form.control}
                    name="name"
                    render={({ field }) => (
                      <FormItem>
                        <FormLabel className="bg-blue-100 px-4 py-2 block">‰ªïÂÖ•ÂÖàÂêç</FormLabel>
                        <FormControl>
                          <Input {...field} />
                        </FormControl>
                        <FormMessage />
                      </FormItem>
                    )}
                  />

                  <FormField
                    control={form.control}
                    name="kana_name"
                    render={({ field }) => (
                      <FormItem>
                        <FormLabel className="bg-blue-100 px-4 py-2 block">‰ªïÂÖ•ÂÖà„Ç´„ÉäÂêç</FormLabel>
                        <FormControl>
                          <Input {...field} />
                        </FormControl>
                        <FormMessage />
                      </FormItem>
                    )}
                  />

                  <div>
                    <FormField
                      control={form.control}
                      name="postal_code"
                      render={({ field }) => (
                        <FormItem>
                          <div className="flex justify-between items-center">
                            <FormLabel className="bg-blue-100 px-4 py-2 block flex-1">ÈÉµ‰æøÁï™Âè∑</FormLabel>
                            <div className="flex items-center gap-2 text-sm">
                              <span>„Éè„Ç§„Éï„É≥</span>
                              <button
                                type="button"
                                className={`px-3 py-1 rounded ${useHyphen ? "bg-blue-500 text-white" : "bg-gray-200"}`}
                                onClick={() => setUseHyphen(true)}
                              >
                                „ÅÇ„Çä
                              </button>
                              <button
                                type="button"
                                className={`px-3 py-1 rounded ${!useHyphen ? "bg-blue-500 text-white" : "bg-gray-200"}`}
                                onClick={() => setUseHyphen(false)}
                              >
                                „Å™„Åó
                              </button>
                            </div>
                          </div>
                          <FormControl>
                            <Input
                              {...field}
                              onChange={(e) => {
                                const formatted = formatPostalCode(e.target.value)
                                field.onChange(formatted)
                              }}
                              maxLength={useHyphen ? 8 : 7}
                            />
                          </FormControl>
                          <FormMessage />
                        </FormItem>
                      )}
                    />
                  </div>
                </div>

                <div className="space-y-4">
                  <div className="grid grid-cols-2 gap-4">
                    <FormField
                      control={form.control}
                      name="prefecture"
                      render={({ field }) => (
                        <FormItem>
                          <FormLabel className="bg-blue-100 px-4 py-2 block">ÈÉΩÈÅìÂ∫úÁúå</FormLabel>
                          <Select onValueChange={field.onChange} defaultValue={field.value}>
                            <FormControl>
                              <SelectTrigger>
                                <SelectValue placeholder="ÈÅ∏Êäû„Åó„Å¶„Åè„Å†„Åï„ÅÑ" />
                              </SelectTrigger>
                            </FormControl>
                            <SelectContent>
                              {prefectures.map((prefecture) => (
                                <SelectItem key={prefecture} value={prefecture}>
                                  {prefecture}
                                </SelectItem>
                              ))}
                            </SelectContent>
                          </Select>
                          <FormMessage />
                        </FormItem>
                      )}
                    />

                    <FormField
                      control={form.control}
                      name="city"
                      render={({ field }) => (
                        <FormItem>
                          <FormLabel className="bg-blue-100 px-4 py-2 block">Â∏ÇÂå∫Áî∫Êùë</FormLabel>
                          <FormControl>
                            <Input {...field} />
                          </FormControl>
                          <FormMessage />
                        </FormItem>
                      )}
                    />
                  </div>

                  <div className="grid grid-cols-2 gap-4">
                    <FormField
                      control={form.control}
                      name="address"
                      render={({ field }) => (
                        <FormItem>
                          <FormLabel className="bg-blue-100 px-4 py-2 block">Â†¥ÊâÄÂêç</FormLabel>
                          <FormControl>
                            <Input {...field} />
                          </FormControl>
                          <FormMessage />
                        </FormItem>
                      )}
                    />

                    <FormField
                      control={form.control}
                      name="building"
                      render={({ field }) => (
                        <FormItem>
                          <FormLabel className="bg-blue-100 px-4 py-2 block">„Éì„É´Âêç</FormLabel>
                          <FormControl>
                            <Input {...field} />
                          </FormControl>
                          <FormMessage />
                        </FormItem>
                      )}
                    />
                  </div>

                  <div className="grid grid-cols-2 gap-4">
                    <FormField
                      control={form.control}
                      name="phone"
                      render={({ field }) => (
                        <FormItem>
                          <FormLabel className="bg-blue-100 px-4 py-2 block">ÈõªË©±Áï™Âè∑</FormLabel>
                          <FormControl>
                            <Input {...field} />
                          </FormControl>
                          <FormMessage />
                        </FormItem>
                      )}
                    />

                    <FormField
                      control={form.control}
                      name="fax"
                      render={({ field }) => (
                        <FormItem>
                          <FormLabel className="bg-blue-100 px-4 py-2 block">FAXÁï™Âè∑</FormLabel>
                          <FormControl>
                            <Input {...field} />
                          </FormControl>
                          <FormMessage />
                        </FormItem>
                      )}
                    />
                  </div>

                  <FormField
                    control={form.control}
                    name="email"
                    render={({ field }) => (
                      <FormItem>
                        <FormLabel className="bg-blue-100 px-4 py-2 block">MAIL</FormLabel>
                        <FormControl>
                          <Input {...field} type="email" />
                        </FormControl>
                        <FormMessage />
                      </FormItem>
                    )}
                  />
                </div>
              </div>

              <div className="grid gap-4 md:grid-cols-2 mt-4">
                <FormField
                  control={form.control}
                  name="contactPerson"
                  render={({ field }) => (
                    <FormItem>
                      <FormLabel className="bg-blue-100 px-4 py-2 block">‰ªïÂÖ•ÂÖàÊãÖÂΩìËÄÖ</FormLabel>
                      <FormControl>
                        <Input {...field} />
                      </FormControl>
                      <FormMessage />
                    </FormItem>
                  )}
                />

                <FormField
                  control={form.control}
                  name="contactPhone"
                  render={({ field }) => (
                    <FormItem>
                      <FormLabel className="bg-blue-100 px-4 py-2 block">‰ªïÂÖ•ÂÖàÊãÖÂΩìËÄÖTEL</FormLabel>
                      <FormControl>
                        <Input {...field} />
                      </FormControl>
                      <FormMessage />
                    </FormItem>
                  )}
                />
              </div>

              <div className="mt-4">
                <FormField
                  control={form.control}
                  name="notes"
                  render={({ field }) => (
                    <FormItem>
                      <FormLabel className="bg-blue-100 px-4 py-2 block">ÂÇôËÄÉ</FormLabel>
                      <FormControl>
                        <Textarea {...field} rows={4} />
                      </FormControl>
                      <FormMessage />
                    </FormItem>
                  )}
                />
              </div>

              <div className="grid gap-4 md:grid-cols-2 mt-4">
                <FormField
                  control={form.control}
                  name="roundingMethod"
                  render={({ field }) => (
                    <FormItem>
                      <FormLabel className="bg-blue-100 px-4 py-2 block">ÈáëÈ°ç‰∏∏„ÇÅ„Éï„É©„Ç∞</FormLabel>
                      <FormControl>
                        <RadioGroup
                          onValueChange={field.onChange}
                          defaultValue={field.value}
                          className="flex space-x-4 mt-2"
                        >
                          <div className="flex items-center space-x-2">
                            <RadioGroupItem value="truncate" id="truncate" />
                            <label htmlFor="truncate">Âàá„ÇäÊç®„Å¶</label>
                          </div>
                          <div className="flex items-center space-x-2">
                            <RadioGroupItem value="round" id="round" />
                            <label htmlFor="round">ÂõõÊç®‰∫îÂÖ•</label>
                          </div>
                          <div className="flex items-center space-x-2">
                            <RadioGroupItem value="ceiling" id="ceiling" />
                            <label htmlFor="ceiling">Âàá„Çä‰∏ä„Åí</label>
                          </div>
                        </RadioGroup>
                      </FormControl>
                      <FormMessage />
                    </FormItem>
                  )}
                />

                <FormField
                  control={form.control}
                  name="employeeCode"
                  render={({ field }) => (
                    <FormItem>
                      <FormLabel className="bg-blue-100 px-4 py-2 block">ÈÄ£Êê∫Á§æÂì°„Ç≥„Éº„Éâ</FormLabel>
                      <FormControl>
                        <Combobox
                          options={employees.map((emp) => ({ value: emp.id, label: `${emp.id} - ${emp.name}` }))}
                          value={field.value}
                          onChange={field.onChange}
                          placeholder="Á§æÂì°„ÇíÈÅ∏Êäû„Åæ„Åü„ÅØÂÖ•Âäõ"
                          emptyMessage="Ë©≤ÂΩì„Åô„ÇãÁ§æÂì°„Åå„ÅÇ„Çä„Åæ„Åõ„Çì"
                        />
                      </FormControl>
                      <FormMessage />
                    </FormItem>
                  )}
                />
              </div>

              <div className="mt-4">
                <FormField
                  control={form.control}
                  name="isActive"
                  render={({ field }) => (
                    <FormItem className="flex flex-row items-start space-x-3 space-y-0">
                      <FormLabel className="bg-blue-100 px-4 py-2 block flex-1">ÊúâÂäπ/ÁÑ°Âäπ„Éï„É©„Ç∞</FormLabel>
                      <FormControl>
                        <div className="flex items-center space-x-2">
                          <Checkbox
                            checked={!field.value}
                            onCheckedChange={(checked) => field.onChange(!checked)}
                            id="isInactive"
                          />
                          <label
                            htmlFor="isInactive"
                            className="text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70"
                          >
                            ÁÑ°Âäπ
                          </label>
                        </div>
                      </FormControl>
                      <FormMessage />
                    </FormItem>
                  )}
                />
              </div>
            </CardContent>
            <CardFooter className="flex justify-between border-t px-6 py-4">
              <div className="flex space-x-2">
                <Button variant="outline" type="button" onClick={() => router.push("/vendors")}>
                  <X className="mr-2 h-4 w-4" />
                  Èñâ„Åò„Çã
                </Button>
                <Button variant="outline" type="button" onClick={() => router.push("/vendors")}>
                  ‰ªïÂÖ•ÂÖà„Éû„Çπ„Çø‰∏ÄË¶ß
                </Button>
              </div>
              <Button type="submit">
                <Save className="mr-2 h-4 w-4" />
                ÁôªÈå≤
              </Button>
            </CardFooter>
          </Card>
        </form>
      </Form>
    </div>
  )
}
